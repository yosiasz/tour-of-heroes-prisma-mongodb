module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateHeroe {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Heroe {
  id: ID!
  name: String!
}

type HeroeConnection {
  pageInfo: PageInfo!
  edges: [HeroeEdge]!
  aggregate: AggregateHeroe!
}

input HeroeCreateInput {
  id: ID
  name: String!
}

type HeroeEdge {
  node: Heroe!
  cursor: String!
}

enum HeroeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type HeroePreviousValues {
  id: ID!
  name: String!
}

type HeroeSubscriptionPayload {
  mutation: MutationType!
  node: Heroe
  updatedFields: [String!]
  previousValues: HeroePreviousValues
}

input HeroeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HeroeWhereInput
  AND: [HeroeSubscriptionWhereInput!]
  OR: [HeroeSubscriptionWhereInput!]
  NOT: [HeroeSubscriptionWhereInput!]
}

input HeroeUpdateInput {
  name: String
}

input HeroeUpdateManyMutationInput {
  name: String
}

input HeroeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [HeroeWhereInput!]
  OR: [HeroeWhereInput!]
  NOT: [HeroeWhereInput!]
}

input HeroeWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createHeroe(data: HeroeCreateInput!): Heroe!
  updateHeroe(data: HeroeUpdateInput!, where: HeroeWhereUniqueInput!): Heroe
  updateManyHeroes(data: HeroeUpdateManyMutationInput!, where: HeroeWhereInput): BatchPayload!
  upsertHeroe(where: HeroeWhereUniqueInput!, create: HeroeCreateInput!, update: HeroeUpdateInput!): Heroe!
  deleteHeroe(where: HeroeWhereUniqueInput!): Heroe
  deleteManyHeroes(where: HeroeWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  heroe(where: HeroeWhereUniqueInput!): Heroe
  heroes(where: HeroeWhereInput, orderBy: HeroeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Heroe]!
  heroesConnection(where: HeroeWhereInput, orderBy: HeroeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HeroeConnection!
  node(id: ID!): Node
}

type Subscription {
  heroe(where: HeroeSubscriptionWhereInput): HeroeSubscriptionPayload
}
`
      }
    